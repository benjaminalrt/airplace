import { part } from "@/bindings/flight_tickets_nft"
import FlightCard from "@/components/Flight"
import WalletButton from "@/components/WalletButton"
import { useConnect, useDisconnect, useIsConnected, useWalletAddress } from "@/contexts/Beacon"
import { useContract } from "@/contexts/Contract"
import { createTicket } from "@/symfony/createTicket"
import { getNextTicketId } from "@/symfony/getNextTicketId"
import { getNextTicketIdUri } from "@/symfony/ticketApi"
import { Flight } from "@/types"
import { Address, Bytes, Nat } from "@completium/archetype-ts-types"
import { getNextInternalQuery } from "next/dist/server/request-meta"
import Head from "next/head"
import Link from "next/link"
import { useRouter } from "next/router"
import { useForm } from "react-hook-form"
import flights from '../../datas/flights.json';


export async function getServerSideProps(context : any) {

  return {
    props: { flight : flights.find(f => f.id == context.params.id) }, // will be passed to the page component as props
  }
}

interface FlightProps {
  flight: any;
}


export default function FlightDetails({ flight }: FlightProps) {

  const { register, handleSubmit } = useForm();
  const contract = useContract();
  const wallet = useWalletAddress();
  const connect= useConnect();
  const disconnect = useDisconnect();
  const isConnected = useIsConnected();
  const router = useRouter();

  const tokenMetadata = `https://benjami.fr/metadatas/${flight.city}`

  const toHex = (s : string) : string => {
    // utf8 to latin1
      var s = unescape(encodeURIComponent(s))
      var h = ''
      for (var i = 0; i < s.length; i++) {
          h += s.charCodeAt(i).toString(16)
      }
      return h
  }

  const createNft = async () => {
    try {
      if (!isConnected()) {
        await connect()
      }

      const nId = await getNextTicketId();
      let nextId = Math.max(1,nId)
      console.log(nextId)

      let walletAdr : string = "";
      if(wallet !== undefined){
        walletAdr = wallet;
      }
      await createTicket({
        walletAddress : wallet,
        city : flight.city,
        nftId : nextId,
        flightId: flight.id
      })
      const adr = new Address(walletAdr)
      const mint = await contract.mint(adr, new Nat(nextId), [["", new Bytes(toHex(`https://benjami.fr/metadatas/${flight.city}.json`))]], [], {})
      router.push('/my-tickets')

    } catch(e) {
      console.log(e)
    }
  }

  return (
    <>
      <Head>
        <title>Airplace - Flight </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='container flex flex-col gap-4 mx-auto py-8'>
        <div className="flex justify-between">
          <h1 className='text-2xl'>Dev Airplace - Flight {flight.id}</h1>
          <Link href={'/'} className="bg-gray-200 hover:bg-white border rounded-lg px-3 py-2">Back</Link>
        </div>

        <div className="flex flex-col gap-8">
          <FlightCard detailPage={true} flight={flight} />
          <div className="flex flex-col gap-3">
            <h2 className="text-xl">Fill the form to claim your ticket</h2>

            <form className="flex flex-col gap-3" onSubmit={handleSubmit(createNft)}>

              <div className="flex flex-col gap-1">
                <label htmlFor="firstName">First name</label>
                <input className="form-input rounded" {...register("firstName")} />
              </div>

              <div className="flex flex-col gap-1">
                <label htmlFor="firstName">Last name</label>
                <input className="form-input rounded" {...register("lastName")} />
              </div>

              <div className="flex justify-center">
                <input type="submit" value={"Get my ticket"} className="bg-blue-300 rounded-lg px-5 py-2 cursor-pointer hover:underline" />
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}
