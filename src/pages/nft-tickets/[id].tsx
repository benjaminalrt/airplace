import { transfer_destination, transfer_param } from "@/bindings/flight_tickets_nft"
import FlightCard from "@/components/Flight"
import WalletButton from "@/components/WalletButton"
import { useIsConnected, useWalletAddress } from "@/contexts/Beacon"
import { useContract } from "@/contexts/Contract"
import { buyTicket } from "@/symfony/buyTicket"
import { getTicket } from "@/symfony/getTicket"
import { sellTicket } from "@/symfony/sellTicket"
import { Flight } from "@/types"
import { Address, Nat } from "@completium/archetype-ts-types"
import { redirect } from "next/dist/server/api-utils"
import Head from "next/head"
import Link from "next/link"
import { useRouter } from "next/router"
import { useState } from "react"
import { useForm } from "react-hook-form"
import flights from '../../datas/flights.json';

export async function getServerSideProps(context : any) {

  const ticket = await getTicket(context.params.id);
  
  return {
    props: { nftTicket : ticket}, // will be passed to the page component as props
  }
}

interface NftTicketPage {
  nftTicket: any;
}

export default function NftTicketPage({ nftTicket }: NftTicketPage) {

  const { register, handleSubmit } = useForm  ();

  const [ticket, setTicket] = useState(nftTicket)
  const walletAddress = useWalletAddress();
  const contract = useContract();
  const isConnected = useIsConnected();
  const flight : Flight|undefined = flights.find(f => f.id == ticket.flightId) 
  const router = useRouter();

  const buy = async () => {
    try {
      const nftId = ticket.nftId;
      const adr = new Address(walletAddress ? walletAddress : "")
      const owner = new Address(ticket.walletAddress)
      const transferDest = new transfer_destination(adr, new Nat(nftId), new Nat(2));
      const transferParam = new transfer_param(owner, [transferDest]);
      const buy = await buyTicket(nftId,{walletAddress})
      const transfer = await contract.do_transfer([transferParam], {})
      router.push('/my-tickets')

    } catch(e) {
      console.log(e)
    }
  }

  return (
    <>
      <Head>
        <title>Airplace - Ticket {ticket.id} </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='container flex flex-col gap-4 mx-auto py-8'>
        <div className="flex justify-between">
          <h1 className='text-2xl'>Dev Airplace - Flight to {flight?.destination}</h1>
        </div>

        <div className="flex gap-8">
          <div className="w-48 h-48">
            <img className='object-cover' src={`https://benjami.fr/assets/${flight?.city}.png`} alt="" />
          </div>
          <div className="flex flex-col">
            <h1 className="font-bold text-2xl">This ticket is {ticket.onSale ? 'on sale' : 'not on sale'} - {flight?.price} USD</h1>

            {isConnected() && 
              <>
                {ticket.walletAddress != walletAddress ?
                  <div className="flex flex-col gap-3 mt-4">
                    <h2 className="text-xl">Fill the form to claim your ticket</h2>
        
                    <form className="flex flex-col gap-3" onSubmit={handleSubmit(buy)}>
        
                      <div className="flex flex-col gap-1">
                        <label htmlFor="firstName">First name</label>
                        <input className="form-input rounded" {...register("firstName")} />
                      </div>
        
                      <div className="flex flex-col gap-1">
                        <label htmlFor="firstName">Last name</label>
                        <input className="form-input rounded" {...register("lastName")} />
                      </div>
        
                      <div className="flex justify-end">
                        <input type="submit" value={"Get my ticket"} className="cursor-pointer hover:underline" />
                      </div>
                    </form>
                  </div>
                  :
                  <>
                    <p>You can't buy your own ticket</p>
                  </>
                }
              </>
            }
            {(!isConnected()) && 
              <div>
                <WalletButton disconnectedContent={"Connect your wallet to purchase"} />
              </div>
            }
            <div className="mt-auto">
              <Link href={'/nft-tickets'} className="bg-gray-200 hover:bg-white border rounded-lg px-3 py-2">Back</Link>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
